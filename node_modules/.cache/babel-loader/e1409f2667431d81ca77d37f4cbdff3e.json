{"ast":null,"code":"import _initializerDefineProperty from \"/home/jakebrowning/projects/mobx-test/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/home/jakebrowning/projects/mobx-test/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/home/jakebrowning/projects/mobx-test/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _temp, _class3, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp2;\n\nimport { computed, observable, reaction } from \"mobx\";\nconst blankAppJson = {\n  title: \"\",\n  headline: \"\",\n  private: false,\n  id: Math.random() * 10\n};\nexport let AppStore = (_class = (_temp = class AppStore {\n  constructor(transportLayer, id) {\n    _initializerDefineProperty(this, \"app\", _descriptor, this);\n\n    this.transportLayer = void 0;\n    this.transportLayer = transportLayer;\n    this.loadApp(id);\n  }\n\n  loadApp(id) {\n    this.transportLayer.getAppById(id).then(appJson => {\n      this.app.updateFromJson(appJson);\n    });\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"app\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return new App(this);\n  }\n})), _class);\nexport let App = (_class3 = (_temp2 = class App {\n  get asJson() {\n    return {\n      title: this.title,\n      headline: this.headline,\n      private: this.private,\n      id: this.id\n    };\n  }\n\n  constructor(store, json = blankAppJson) {\n    _initializerDefineProperty(this, \"title\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"headline\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"private\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"id\", _descriptor5, this);\n\n    this.store = void 0;\n    this.saveHandler = void 0;\n    this.store = store;\n    this.saveHandler = reaction(() => this.asJson, appJson => this.store.transportLayer.saveApp(appJson));\n    this.updateFromJson(json);\n  }\n\n  updateFromJson(json) {\n    this.title = json.title;\n    this.headline = json.headline;\n    this.private = json.private;\n    this.id = json.id;\n  }\n\n}, _temp2), (_descriptor2 = _applyDecoratedDescriptor(_class3.prototype, \"title\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"\";\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class3.prototype, \"headline\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"\";\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class3.prototype, \"private\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class3.prototype, \"id\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return Math.random() * 10;\n  }\n}), _applyDecoratedDescriptor(_class3.prototype, \"asJson\", [computed], Object.getOwnPropertyDescriptor(_class3.prototype, \"asJson\"), _class3.prototype)), _class3);","map":{"version":3,"sources":["/home/jakebrowning/projects/mobx-test/src/stores/AppStore.tsx"],"names":["computed","observable","reaction","blankAppJson","title","headline","private","id","Math","random","AppStore","constructor","transportLayer","loadApp","getAppById","then","appJson","app","updateFromJson","App","asJson","store","json","saveHandler","saveApp"],"mappings":";;;;;;AAAA,SAAQA,QAAR,EAAkBC,UAAlB,EAA8BC,QAA9B,QAA6C,MAA7C;AAEA,MAAMC,YAAY,GAAG;AAACC,EAAAA,KAAK,EAAE,EAAR;AAAYC,EAAAA,QAAQ,EAAE,EAAtB;AAA0BC,EAAAA,OAAO,EAAE,KAAnC;AAA0CC,EAAAA,EAAE,EAAEC,IAAI,CAACC,MAAL,KAAgB;AAA9D,CAArB;AAGA,WAAaC,QAAb,sBAAO,MAAMA,QAAN,CAAe;AAKlBC,EAAAA,WAAW,CAACC,cAAD,EAAsBL,EAAtB,EAAkC;AAAA;;AAAA,SAFtCK,cAEsC;AACzC,SAAKA,cAAL,GAAsBA,cAAtB;AACA,SAAKC,OAAL,CAAaN,EAAb;AACH;;AAEMM,EAAAA,OAAP,CAAeN,EAAf,EAA2B;AACvB,SAAKK,cAAL,CAAoBE,UAApB,CAA+BP,EAA/B,EAAmCQ,IAAnC,CAAyCC,OAAD,IAAkB;AACtD,WAAKC,GAAL,CAASC,cAAT,CAAwBF,OAAxB;AACH,KAFD;AAGH;;AAdiB,CAAtB,6EACKf,UADL;AAAA;AAAA;AAAA;AAAA;AAAA,WAC6B,IAAIkB,GAAJ,CAAQ,IAAR,CAD7B;AAAA;AAAA;AAiBA,WAAaA,GAAb,wBAAO,MAAMA,GAAN,CAAU;AAMb,MACIC,MADJ,GACa;AACT,WAAO;AACHhB,MAAAA,KAAK,EAAE,KAAKA,KADT;AAEHC,MAAAA,QAAQ,EAAE,KAAKA,QAFZ;AAGHC,MAAAA,OAAO,EAAE,KAAKA,OAHX;AAIHC,MAAAA,EAAE,EAAE,KAAKA;AAJN,KAAP;AAMH;;AAKDI,EAAAA,WAAW,CAACU,KAAD,EAAaC,IAAS,GAAGnB,YAAzB,EAAuC;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,SAH1CkB,KAG0C;AAAA,SAF1CE,WAE0C;AAC9C,SAAKF,KAAL,GAAaA,KAAb;AAEA,SAAKE,WAAL,GAAmBrB,QAAQ,CACvB,MAAM,KAAKkB,MADY,EAEvBJ,OAAO,IAAI,KAAKK,KAAL,CAAWT,cAAX,CAA0BY,OAA1B,CAAkCR,OAAlC,CAFY,CAA3B;AAKA,SAAKE,cAAL,CAAoBI,IAApB;AACH;;AAEMJ,EAAAA,cAAP,CAAsBI,IAAtB,EAAiC;AAC7B,SAAKlB,KAAL,GAAakB,IAAI,CAAClB,KAAlB;AACA,SAAKC,QAAL,GAAgBiB,IAAI,CAACjB,QAArB;AACA,SAAKC,OAAL,GAAegB,IAAI,CAAChB,OAApB;AACA,SAAKC,EAAL,GAAUe,IAAI,CAACf,EAAf;AACH;;AAnCY,CAAjB,kFACKN,UADL;AAAA;AAAA;AAAA;AAAA;AAAA,WACuC,EADvC;AAAA;AAAA,6EAEKA,UAFL;AAAA;AAAA;AAAA;AAAA;AAAA,WAE0C,EAF1C;AAAA;AAAA,4EAGKA,UAHL;AAAA;AAAA;AAAA;AAAA;AAAA,WAGiC,KAHjC;AAAA;AAAA,uEAIKA,UAJL;AAAA;AAAA;AAAA;AAAA;AAAA,WAIoCO,IAAI,CAACC,MAAL,KAAgB,EAJpD;AAAA;AAAA,4DAMKT,QANL","sourcesContent":["import {computed, observable, reaction} from \"mobx\";\n\nconst blankAppJson = {title: \"\", headline: \"\", private: false, id: Math.random() * 10};\n\n\nexport class AppStore {\n    @observable public app = new App(this);\n\n    public transportLayer: any;\n\n    constructor(transportLayer: any, id: number) {\n        this.transportLayer = transportLayer;\n        this.loadApp(id);\n    }\n\n    public loadApp(id: number) {\n        this.transportLayer.getAppById(id).then((appJson: any) => {\n            this.app.updateFromJson(appJson);\n        });\n    }\n}\n\nexport class App {\n    @observable public title: string = \"\";\n    @observable public headline: string = \"\";\n    @observable public private = false;\n    @observable public id: number = Math.random() * 10;\n\n    @computed\n    get asJson() {\n        return {\n            title: this.title,\n            headline: this.headline,\n            private: this.private,\n            id: this.id\n        };\n    }\n\n    private store: AppStore;\n    private saveHandler: any;\n\n    constructor(store: any, json: any = blankAppJson) {\n        this.store = store;\n\n        this.saveHandler = reaction(\n            () => this.asJson,\n            appJson => this.store.transportLayer.saveApp(appJson)\n        );\n\n        this.updateFromJson(json);\n    }\n\n    public updateFromJson(json: any) {\n        this.title = json.title;\n        this.headline = json.headline;\n        this.private = json.private;\n        this.id = json.id;\n    }\n}"]},"metadata":{},"sourceType":"module"}